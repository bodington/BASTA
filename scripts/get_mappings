#!/usr/bin/env python

import sys
import os
import argparse
import bsa
import bsddb3
import hashlib

#######
#
#  download_mappings.py - Download and process NCBI mapping to various database
#  accession numbers to ncbi taxonID
#
####
#   COPYRIGHT DISCALIMER:
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#
#   Author: Tim Kahlke, tim.kahlke@audiotax.is
#   Date:   April 2017
#



def main(args):

    if args.type == "all":
        process_all(args)
    elif args.type == "prot":
        process_prot(args)
    elif args.type == "wgs":
        process_wgs(args)
    elif args.type == "gss":
        process_gss(args)
    elif args.type == "est":
        process_est(args)
    elif args.type == "pdb":
        process_pdb(args)
    else:
        process_gb(args)


def process_all(args):
    process_prot(args)
    process_wgs(args)
    process_est(args)
    process_gss(args)
    process_gb(args)
    process_pdb(args)




def process_gss(args):
    if args.download:
            down_and_check(args,"nucl_gss.accession2taxid.gz")
    bsa.create_db(os.path.join(root,"taxonomy"),"nucl_gss.accession2taxid.gz","gss_mapping.db",1,3)


def process_pdb(args):
    if(args.download){
        _downloadPDB(args)
    bsa.create_db(os.path.join(root,"taxonomy"),"pdb.accession2taxid.gz","pdb_mapping.db",1,3)


def process_gb(args):
    if args.download:
        down_and_check(args,"nucl_gb.accession2taxid.gz")
    bsa.create_db(os.path.join(root,"taxonomy"),"nucl_gb.accession2taxid.gz","gb_mapping.db",1,3)


def process_est(args):
    if args.download:
        down_and_check(args,"nucl_est.accession2taxid.gz")
    bsa.create_db(os.path.join(root,"taxonomy"),"nucl_est.accession2taxid.gz","est_mapping.db",1,3)


def process_wgs(args):
    if args.download:
        down_and_check(args,"nucl_wgs.accession2taxid.gz")
    bsa.create_db(os.path.join(root,"taxonomy"),"nucl_wgs.accession2taxid.gz","wgs_mapping.db",1,3)


def process_prot(args):
    if args.download:
        down_and_check(args,"prot.accession2taxid.gz")
    bsa.create_db(os.path.join(root,"taxonomy"),"prot.accession2taxid.gz","prot_mapping.db",1,3)



# Check MD5 sum of file
def _check(f,path):
    with open(os.path.join(path,f)) as f:
        fl = f.readline()
        l = filter(None,fl.split())
        filehash = hashlib.md5()
        filehash.update(open(os.path.join(path,l[1])).read())
        if str(filehash.hexdigest()) is not str(l[0]): 
            return 1
        else:
            return 0


# Start downloading and checking files
def down_and_check(args,fn):
    wget_file(args.ftp,fn,args.data_dir)
    md5name = fn + ".md5"
    wget_file(args.ftp,md5name,args.data_dir)

    while(check_md5(md5name,args.data_dir):
            print("MD5 sum mismatch. Re-downloading file %s" % fn)
            down_and_check(args,fn)


# Download files using wget
def wget_file(path,f,outdir):
    print("Downloading database %s" % f)
    os.system("wget -O %s/%s %s/%s" % (outdir,f,path,f))




if __name__=="__main__":
    parser = argparse.ArgumentParser(description="Script to download and process NCBI mappings of GenBank2Taxonid, Protein2TaxonID, EST2TaxonID, WGS2TaxonID and GSS2TaxonID.\nNOTE: Depending on your system and internet connection this can take up so several hours!")
    parser.add_argument("type", help="Type of mapping file to be downloaded (all, prot, est, wgs, gss or gb)", choices=['all','wgs','prot','est','gss','gb'])
    parser.add_argument("data_dir", help="Directory of mapping files and databases (default: ../taxonomy)",default="../taxonomy")
    parser.add_argument("bsa_root", help="Path to BSA installation root (default: ..",default="..")
    parser.add_argument("-f", "--ftp", help="URL to NCBI ftp for accession mapping (default: ftp://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/)", default="ftp://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/")
    parser.add_argument("-d", "--download", help="If set to \"True\" mapping files will be downloaded, too", type=bool, default=False)

    args = parser.parse_args()
    main(args)




