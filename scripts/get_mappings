#!/usr/bin/env python

import sys
import os
import argparse
import bsa
import hashlib

#######
#
#  download_mappings.py - Download and process NCBI mapping to various database
#  accession numbers to ncbi taxonID
#
####
#   COPYRIGHT DISCALIMER:
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#
#   Author: Tim Kahlke, tim.kahlke@audiotax.is
#   Date:   April 2017
#



def main(args):

    if args.type == "all":
        _all(args)
    elif args.type == "prot":
        _prot(args)
    elif args.type == "wgs":
        _wgs(args)
    elif args.type == "gss":
        _gss(args)
    elif args.type == "est":
        _est(args)
    elif args.type == "pdb":
        _pdb(args)
    else:
        _gb(args)


def _all(args):
    _prot(args)
    _wgs(args)
    _est(args)
    _gss(args)
    _gb(args)
    _pdb(args)




# Download protein database
def _gss(args):
    download(args.ncbi_ftp,"nucl_gss.accession2taxid.gz",args.output)
    download(args.ncbi_ftp,"nucl_gss.accession2taxid.gz.md5",args.output)
    
    # Re-start download in cae MD5 sum not the same
    while(_check("nucl_gss.accession2taxid.gz.md5",args.output)):
        print("MD5 sum mismatch. Re-downloading file nucl_gss.accession2taxid.gz")
        _gss(args)

    # create berkeleydb acc2taxonid
    bsa.create_db(os.path.join(root,"taxonomy"),"nucl_gss.accession2taxid.gz","gss_mapping.db",1,3)



# Download protein database
def _pdb(args):
    download(args.ncbi_ftp,"pdb.accession2taxid.gz",args.output)
    download(args.ncbi_ftp,"pdb.accession2taxid.gz.md5",args.output)
    
    # Re-start download in cae MD5 sum not the same
    while(_check("pdb.accession2taxid.gz.md5",args.output)):
        print("MD5 sum mismatch. Re-downloading file pdb.accession2taxid.gz.gz")
        _pdb(args)

    # create berkeleydb acc2taxonid
    bsa.create_db(os.path.join(root,"taxonomy"),"pdb.accession2taxid.gz","pdb_mapping.db",1,3)

    

# Download protein database
def _gb(args):
    download(args.ncbi_ftp,"nucl_gb.accession2taxid.gz",args.output)
    download(args.ncbi_ftp,"nucl_gb.accession2taxid.gz.md5",args.output)
    
    # Re-start download in cae MD5 sum not the same
    while(_check("nucl_gb.accession2taxid.gz.md5",args.output)):
        print("MD5 sum mismatch. Re-downloading file nucl_gb.accession2taxid.gz")
        _gb(args)
    
    # create berkeleydb acc2taxonid
    bsa.create_db(os.path.join(root,"taxonomy"),"nucl_gb.accession2taxid.gz","gb_mapping.db",1,3)


# Download protein database
def _est(args):
    download(args.ncbi_ftp,"nucl_est.accession2taxid.gz",args.output)
    download(args.ncbi_ftp,"nucl_est.accession2taxid.gz",args.output)
    
    # Re-start download in cae MD5 sum not the same
    while(_check("nucl_est.accession2taxid.gz.md5",args.output)):
        print("MD5 sum mismatch. Re-downloading file nucl_est.accession2taxid.gz")
        _est(args)
    
    # create berkeleydb acc2taxonid
    bsa.create_db(os.path.join(root,"taxonomy"),"nucl_est.accession2taxid.gz","est_mapping.db",1,3)



# Download WGS database
def _wgs(args):
    download(args.ncbi_ftp,"nucl_wgs.accession2taxid.gz",args.output)
    download(args.ncbi_ftp,"nucl_wgs.accession2taxid.gz",args.output)
    
    # Re-start download in cae MD5 sum not the same
    while(_check("nucl_wgs.accession2taxid.gz.md5",args.output)):
        print("MD5 sum mismatch. Re-downloading file nucl_wgs.accession2taxid.gz")
        _wgs(args)
    
    # create berkeleydb acc2taxonid
    bsa.create_db(os.path.join(root,"taxonomy"),"nucl_wgs.accession2taxid.gz","wgs_mapping.db",1,3)



# Download protein database
def _prot(args):
    download(args.ncbi_ftp,"prot.accession2taxid.gz",args.output)
    download(args.ncbi_ftp,"prot.accession2taxid.gz.md5",args.output)

    # Re-start download in cae MD5 sum not the same
    while(_check("prot.accession2taxid.gz.md5",args.output)):
        print("MD5 sum mismatch. Re-downloading file prot.accession2taxid.gz")
        _prot(args)

    # create berkeleydb acc2taxonid
    bsa.create_db(os.path.join(root,"taxonomy"),"prot.accession2taxid.gz","prot_mapping.db",1,3)



# Check MD5 sum of file
def _check(f,path):
    with open(os.path.join(path,f)) as f:
        fl = f.readline()
        l = filter(None,fl.split())
        filehash = hashlib.md5()
        filehash.update(open(os.path.join(path,l[1])).read())
        if str(filehash.hexdigest()) is not str(l[0]): 
            return 1
        else:
            return 0

    # create berkeleydb acc2taxonid
    bsa.create_db(os.path.join(root,"taxonomy"),"nucl_gss.accession2taxid.gz","gss_mapping.db",1,3)



# Download database and md5 files
def download(path,f,outdir):
    print("Downloading database %s" % f)
    os.system("wget -O %s/%s %s/%s" % (outdir,f,path,f))




if __name__=="__main__":
    parser = argparse.ArgumentParser(description="Script to download and process NCBI mappings of GenBank2Taxonid, Protein2TaxonID, EST2TaxonID, WGS2TaxonID and GSS2TaxonID.\nNOTE: Depending on your system and internet connection this can take up so several hours!")
    parser.add_argument("type", help="Type of mapping file to be downloaded (all, prot, est, wgs, gss or gb)", choices=['all','wgs','prot','est','gss','gb'])
    parser.add_argument("output", help="Output directory (default: ../taxonomy)",default="../taxonomy")
    parser.add_argument("bsa_root", help="Path to BSA installation root (default: ..",default="..")
    parser.add_argument("ncbi_ftp", help="URL to NCBI ftp for accession mapping (default: ftp://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/)", default="ftp://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/")

    args = parser.parse_args()
    main(args)




